runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
knitr::opts_chunk$set(echo = TRUE)
conv_dif_dist <- posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
conv_dif_dist
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per))
conv_dif_dist <- posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)) %>% #/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)) %>% #/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
posterior_samples(fit) %>%
select(1:2) %>%
mutate(dif = uplift(.[1], .[2]))
posterior_samples(fit) %>%
select(1:2) %>%
transmute(dif = uplift(.[1], .[2]))
posterior_samples(fit) %>%
select(1:2) %>%
transmute(dif = uplift(.[[1]], .[[2]]))
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
?round()
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
library(shiny); runApp('conv_mrr_app.R')
rbinom(1,0.5)
rbinom(1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
library(shiny); runApp('conv_mrr_app.R')
git branch
runApp('conv_mrr_app.R')
install.packages("DT")
install.packages("DT")
install.packages("DT")
library(DT)
library(tidyverse)
library(brms)
library(magrittr)
library(forcats)
library(tidyr)
library(modelr)
library(ggdist)
library(tidybayes)
library(cowplot)
library(ggrepel)
library(RColorBrewer)
library(bayestestR)
library(scales)
library(kableExtra)
library(plotly)
library(shiny)
library(HDInterval)
library(shinyBS)
####
library(shinydashboard)
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
library(htmlwidgets)
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
brewer.pal(2, Set1)
brewer.pal(2, "Set1")
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
brewer.pal3(3, "Set1")
brewer.pal(3, "Set1")
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
knitr::opts_chunk$set(echo = TRUE)
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%")) %>%
gather(key = variation, value = `Prob. of outperforming`, a_better, b_better) %>%
gather(key = variation, value = `prob_oop_num`, a_better_num, b_better_num) %>%
select(`Prob. of outperforming`, prob)
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%")) %>%
gather(key = variation, value = `Prob. of outperforming`, a_better, b_better) %>%
gather(key = variation2, value = `prob_oop_num`, a_better_num, b_better_num)
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%"))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
mutate(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]) , VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
gather(key = variation, value = `prob_oop_num`, a_better_num, b_better_num) %>%
select(prob_oop_num)
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
mrr_mean <- mean_samp %>%
pivot_longer(cols = c(A, B), values_to = "means", names_to = "Variation")  %>%
group_by(Variation) %>%
summarise(`Estimate of mean` = round(mean(means),2),
`Est. error of mean` = round(sd(means),2),
Q2.5 = round(quantile(means, prob = c(.025)),2),
Q97.5 = round(quantile(means, prob = c(.975)),2))
mrr_better_num <- mean_samp %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
pivot_longer(cols = c(a_better_num, b_better_num), values_to = "prob_oop_num") %>%
select("prob_oop_num")
#Calculating probabikity of each variation having higher true mean MRR
mrr_better <- mean_samp %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%")) %>%
pivot_longer(cols = c(a_better, b_better), values_to = "Prob. of outperforming (on mean)") %>%
select("Prob. of outperforming (on mean)")
model2_tabl <- cbind(mrr_mean, mrr_better, mrr_better_num)
model2_tabl
mean_samp %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2))
mean_samp %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%")
mean_samp %>%
mean_samp %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%"))
mrr_mean <- mean_samp %>%
pivot_longer(cols = c(A, B), values_to = "means", names_to = "Variation")  %>%
group_by(Variation) %>%
summarise(`Estimate of mean` = round(mean(means),2),
`Est. error of mean` = round(sd(means),2),
Q2.5 = round(quantile(means, prob = c(.025)),2),
Q97.5 = round(quantile(means, prob = c(.975)),2))
mrr_better_num <- mean_samp %>%
summarise(a_better_num = round((sum(.[,1]>.[,2])/n())*100,2),
b_better_num = round((sum(.[,2]>.[,1])/n())*100,2)) %>%
pivot_longer(cols = c(a_better_num, b_better_num), values_to = "prob_oop_num") %>%
select("prob_oop_num")
#Calculating probabikity of each variation having higher true mean MRR
mrr_better <- mean_samp %>%
summarise(a_better = paste0(round((sum(.[,1]>.[,2])/n())*100,2),"%"),
b_better = paste0(round((sum(.[,2]>.[,1])/n())*100,2),"%")) %>%
pivot_longer(cols = c(a_better, b_better), values_to = "Prob. of outperforming (on mean)") %>%
select("Prob. of outperforming (on mean)")
model2_tabl <- cbind(mrr_mean, mrr_better, mrr_better_num)
model2_tabl
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
library(shiny); runApp('bayesian_analysis_applet.R')
library(shiny); runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
library(shiny); runApp('bayesian_analysis_applet.R')
library(shiny); runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
runApp('bayesian_analysis_applet.R')
remove.packages("DT")
