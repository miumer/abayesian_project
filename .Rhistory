g_overall_dist_dif
ggplot(data = dist_dif_overall, aes(x=dif))+
geom_density()
ggplot(data = dist_dif_overall, aes(x=dif))+
geom_density()+
ggtitle("Model implied distribution of difference of overall MRR per visitor")
###### Proovin koodi
dist_dif_overall <- overall_results %>%
transmute(dif = B_overall-A_overall)
pre_g_overall_dist_dif <- dist_dif_overall %>%
ggplot(aes(x = dif))+
geom_density()
dens3 <- ggplot_build(pre_g_overall_dist_dif)$data[[1]]
g_overall_dist_dif <- ggplot(data = dist_dif_overall, aes(x=dif))+
geom_density()+
ggtitle("Model implied distribution of difference of overall MRR per visitor")+
geom_area(data = dens3 %>% filter(x > 0),
aes(x=x,y=y),
fill = "#377EB8",
color = "#377EB8",
alpha = 0.8)+
geom_area(data = dens3 %>% filter(x < 0),
aes(x=x,y=y),
fill = "#E41A1C",
color = "#E41A1C",
alpha = 0.8) +
#geom_area(data = dens2 %>% filter(x < hdi(conv_mrr_model()[[7]]$dif, credMass = input$creds3)[1]),
#aes(x=x,y=y),
#fill = "black",
#color = "black",
#alpha = 0.5)+
#geom_area(data = dens2 %>% filter(x > hdi(conv_mrr_model()[[7]]$dif, credMass = input$creds3)[2]),
#aes(x=x,y=y),
#fill = "black",
#color = "black",
#alpha = 0.5)+
geom_area(data = dens2 %>% filter(x < quantile(dist_dif_overall$dif, probs = (1-0.68)*0.5, names = FALSE)),
aes(x=x,y=y),
fill = "black",
color = "black",
alpha = 0.5)+
geom_area(data = dens2 %>% filter(x > quantile(dist_dif_overall$dif, probs = 1-((1-0.68)*0.5), names=FALSE)),
aes(x=x,y=y),
fill = "black",
color = "black",
alpha = 0.5)+
scale_y_continuous(NULL, breaks = NULL) +
scale_x_continuous(name  = "mean MRR per PC of B - mean MRR per PC of A", labels = dollar_format())+
theme_bw()
g_overall_dist_dif
###### Proovin koodi
dist_dif_overall <- overall_results %>%
transmute(dif = B_overall-A_overall)
pre_g_overall_dist_dif <- dist_dif_overall %>%
ggplot(aes(x = dif))+
geom_density()
dens3 <- ggplot_build(pre_g_overall_dist_dif)$data[[1]]
g_overall_dist_dif <- ggplot(data = dist_dif_overall, aes(x=dif))+
geom_density()+
ggtitle("Model implied distribution of difference of overall MRR per visitor")+
geom_area(data = dens3 %>% filter(x > 0),
aes(x=x,y=y),
fill = "#377EB8",
color = "#377EB8",
alpha = 0.8)+
geom_area(data = dens3 %>% filter(x < 0),
aes(x=x,y=y),
fill = "#E41A1C",
color = "#E41A1C",
alpha = 0.8) +
#geom_area(data = dens2 %>% filter(x < hdi(conv_mrr_model()[[7]]$dif, credMass = input$creds3)[1]),
#aes(x=x,y=y),
#fill = "black",
#color = "black",
#alpha = 0.5)+
#geom_area(data = dens2 %>% filter(x > hdi(conv_mrr_model()[[7]]$dif, credMass = input$creds3)[2]),
#aes(x=x,y=y),
#fill = "black",
#color = "black",
#alpha = 0.5)+
geom_area(data = dens3 %>% filter(x < quantile(dist_dif_overall$dif, probs = (1-0.68)*0.5, names = FALSE)),
aes(x=x,y=y),
fill = "black",
color = "black",
alpha = 0.5)+
geom_area(data = dens3 %>% filter(x > quantile(dist_dif_overall$dif, probs = 1-((1-0.68)*0.5), names=FALSE)),
aes(x=x,y=y),
fill = "black",
color = "black",
alpha = 0.5)+
scale_y_continuous(NULL, breaks = NULL) +
scale_x_continuous(name  = "mean MRR per PC of B - mean MRR per PC of A", labels = dollar_format())+
theme_bw()
g_overall_dist_dif
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
brewer.pal(10, "Set1")
runApp('conv_mrr_app.R')
?scale_colour_manual
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
?add_segments
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
install.packages(shinyBS)
install.packages("shinyBS")
library(shinyBs)
library(shinyBS)
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
brewer.pal(9. "Set1")
brewer.pal(9, "Set1")
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
scale_x_discrete()?
?scale_x_discrete
?scale_x_discrete()
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
?plotOutput
raw_dist <-  npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
scale_x_discrete(name = "Variation")+
scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))+
theme_bw()
npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
scale_x_discrete(name = "Variation")+
scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))+
theme_bw()
npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
#scale_x_discrete(name = "Variation")+
#scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))+
theme_bw()
npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
#scale_x_discrete(name = "Variation")+
#scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10))
npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
#scale_x_discrete(name = "Variation")+
#scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))+
theme_bw()
pc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
#scale_x_discrete(name = "Variation")+
#scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))
npc_dat %>%
ggplot(aes(x = as.factor(variation), y = log(firstmrr), fill = as.factor(variation))) +
ggtitle("Distribution of log-transformed raw MRR data")+
geom_violin(trim=FALSE, alpha =0.5)+
geom_jitter(shape=10, position=position_jitter(0.05), color = "#7570B3")+
geom_boxplot(width=0.15, fill = "white", alpha = 0.5, color = "black" )+
scale_fill_brewer(palette="Dark2")+
#scale_x_discrete(name = "Variation")+
#scale_y_continuous(name = "MRR", n.breaks = 20)+
guides(fill=guide_legend(title = "Variations"))+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 10),
axis.text.y = element_text(face = "bold", color = "black",
size = 10))+
theme(axis.title.x = element_text(face = "bold", color = "black",
size = 12),
axis.title.y = element_text(face = "bold", color = "black",
size = 12))+
theme(legend.key=element_rect(fill = "gray30"),
legend.key.size = unit(2,"line"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(legend.key.size = unit(2,"line"))
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
?observe
library(shiny); runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
knitr::opts_chunk$set(echo = TRUE)
conv_dif_dist <- posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
conv_dif_dist
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per))
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per))
conv_dif_dist <- posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)) %>% #/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)) %>% #/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
posterior_samples(fit) %>%
select(1:2) %>%
mutate(varA_per = logit2prob(.[,1]), VarB_per = logit2prob(.[,1]+.[,2])) %>%
select(varA_per, VarB_per) %>%
transmute(dif = (VarB_per-varA_per)/mean(varA_per)) %>%
ggplot(aes(x = dif)) +
ggtitle("Distribution of difference in conversion rate (visitor to pc)")+
stat_slab(alpha = .5, fill = "#7570B3")+
stat_pointinterval(position = position_dodge(width = .4, preserve = "single"))+
scale_x_continuous(name  = "Difference in conversion Rate", labels = percent)+
scale_y_continuous(NULL, breaks = NULL) +
guides(color = FALSE, fill = guide_legend(title=NULL))+
theme_bw()
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
posterior_samples(fit) %>%
select(1:2) %>%
mutate(dif = uplift(.[1], .[2]))
posterior_samples(fit) %>%
select(1:2) %>%
transmute(dif = uplift(.[1], .[2]))
posterior_samples(fit) %>%
select(1:2) %>%
transmute(dif = uplift(.[[1]], .[[2]]))
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
?round()
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
runApp('conv_mrr_app.R')
library(shiny); runApp('conv_mrr_app.R')
rbinom(1,0.5)
rbinom(1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
